),
tabPanel(tags$p("Category In-depth"),
plotOutput(outputId = "ParetoAnalysis"),
valueBoxOutput(outputId = "TotalSales5"),
valueBoxOutput(outputId = "TotalDiscount5"),
valueBoxOutput(outputId = "Volumes5")
)
)
)
)
)
)
server <- function(input, output){
datasetInput <- reactive({
Sales %>%
filter(TransactionDate >= input$Time[1] & TransactionDate <= input$Time[2]) %>%
filter(DistributionChannel %in% input$Channel) %>%
filter(StoreKey %in% input$StoreID) %>%
filter(ProductCategory_Lvl2 %in% input$Category) %>%
filter(ProductKey %in% input$ProductID) %>%
group_by(TransactionDate) %>%
summarise(Daily_Mean = mean(ActualSales),
Daily_Sum = sum(ActualSales),
Daily_Discount = -sum(SalesDiscount),
Volumes = sum(UnitVolume))
})
datasetInput2 <- reactive({
Sales %>%
filter(TransactionDate >= input$Time[1] & TransactionDate <= input$Time[2]) %>%
filter(DistributionChannel %in% input$Channel) %>%
filter(StoreKey %in% input$StoreID) %>%
filter(ProductCategory_Lvl2 %in% input$Category) %>%
filter(ProductKey %in% input$ProductID) %>%
group_by(TransactionDate, PromoMechanic, DistributionChannel) %>%
summarise(Daily_Mean = mean(ActualSales),
Daily_Sum = sum(ActualSales),
Daily_Discount = -sum(SalesDiscount),
Volumes = sum(UnitVolume))
})
store.summary <- reactive({
Sales %>%
select(StoreKey, StoreType, Region_Lvl1, Region_Lvl2, ActualSales, TransactionDate,
DistributionChannel, ProductCategory_Lvl2, ProductKey) %>%
filter(TransactionDate >= input$Time[1] & TransactionDate <= input$Time[2]) %>%
filter(DistributionChannel %in% input$Channel) %>%
filter(ProductCategory_Lvl2 %in% input$Category) %>%
filter(ProductKey %in% input$ProductID) %>%
group_by(StoreKey, StoreType, Region_Lvl1, Region_Lvl2) %>%
summarise(revenues = sum(ActualSales)) %>%
mutate(txt = paste("Store: ",StoreKey, "\n",
"Yearly sales: ", round(revenues/1000, digits = 0),"kMYR", "\n",
"Region lvl.1: ", Region_Lvl1, "\n",
"Region lvl.2: ", Region_Lvl2)) %>%
arrange(desc(revenues)) %>%
ungroup()
})
transactions.sag <- reactive({
Sales %>%
filter(TransactionDate >= input$Time[1] & TransactionDate <= input$Time[2]) %>%
filter(DistributionChannel %in% input$Channel) %>%
filter(StoreKey %in% input$StoreID) %>%
filter(ProductCategory_Lvl2 %in% input$Category) %>%
group_by(ProductCategory_Lvl2) %>%
arrange(TransactionDate) %>%
mutate(cum_rev = cumsum(ActualSales))
})
pareto.analysis <- reactive({
Sales %>%
select(ProductKey, ProductCategory_Lvl2, ActualSales, TransactionDate, DistributionChannel, StoreKey) %>%
filter(TransactionDate >= input$Time[1] & TransactionDate <= input$Time[2]) %>%
filter(DistributionChannel %in% input$Channel) %>%
filter(StoreKey %in% input$StoreID) %>%
filter(ProductCategory_Lvl2 %in% input$Category) %>%
group_by(ProductKey, ProductCategory_Lvl2) %>%
summarise(tot.revenues = sum(ActualSales)) %>%
na.omit() %>%
ungroup() %>%
arrange(desc(tot.revenues)) %>%
mutate(per.revenues = base::cumsum(tot.revenues)/sum(tot.revenues))
})
topN.products <- reactive({
pareto.analysis() %>%
filter(ProductKey %in% pareto.analysis()$ProductKey[1:input$TopN])
})
# BarPlot
output$PromotionMechanism <- renderPlot({
print(myplot2 <- ggplot(datasetInput2(), aes(x=DistributionChannel,
y=Daily_Sum, fill=PromoMechanic)) +
geom_bar(stat="identity", position=position_dodge()) +
# geom_errorbar(aes(ymin=Daily_Sum, ymax=Daily_Sum), width=.2,
#              position=position_dodge(.9)) +
scale_fill_brewer(palette="Paired") +
scale_x_discrete(guide = guide_axis(check.overlap = TRUE)) +
theme(panel.grid.major = element_blank(),
# axis.line = element_line(colour = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_rect(fill= NA),
plot.background = element_rect(fill= NA)))
})
# Time Series
output$SalesVolumes <- renderPlot({
print(myplot <- ggplot(datasetInput(), aes(x = TransactionDate, y = Daily_Sum)) +
geom_line(color = "deepskyblue4") +
geom_line(aes(x = TransactionDate,
y = Daily_Discount*(max(Daily_Sum)/max(Daily_Discount))),
color = "yellow4") +
scale_y_continuous(
# Features of the first axis
name = "AggregateSales",
# Add a second axis and specify its features
sec.axis = sec_axis(~.*max(datasetInput()$Daily_Sum)/max(datasetInput()$Daily_Discount),
name="AggregateDiscount")) +
theme(# panel.grid.major = element_blank(),
# axis.line = element_line(colour = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_rect(fill=NA),
plot.background = element_rect(fill=NA)))
})
#output$MeanDiscount <- renderValueBox({
# valueBox(subtitle = mean(datasetInput()$Daily_Discount),
#         value = "MeanDailyDiscount (MYR)")
# })
#output$MeanSale <- renderValueBox({
# valueBox(subtitle = mean(datasetInput()$Daily_Sum),
#         value = "MeanDailySales (MYR)")
#})
lapply(1:5, function(nr){
output[[paste0("Volumes", nr)]] <- renderValueBox({
valueBox(
subtitle = sum(datasetInput()$Volumes),
value = "Volumes (Unit)",
width = 4,
color = "navy")
})
})
lapply(1:5, function(nr){
output[[paste0("TotalDiscount", nr)]] <- renderValueBox({
valueBox(
subtitle = sum(datasetInput()$Daily_Discount),
value = "TotDiscount (MYR)",
width = 4,
color = "navy")})
})
lapply(1:5, function(nr){
output[[paste0("TotalSales", nr)]] <- renderValueBox({
valueBox(
subtitle = sum(datasetInput()$Daily_Sum),
value = "TotSales (MYR)",
width = 4,
color = "navy")})
})
output$Store <- ggiraph::renderggiraph({
packing <- circleProgressiveLayout(store.summary()$revenues, sizetype = "area")
data <- cbind(store.summary(), packing)
data.gg <- circleLayoutVertices(packing, npoints = 50)
p <- ggplot() +
geom_polygon_interactive(data = data.gg,
aes(x = x, y = y, group = id, fill = id,
tooltip = data$txt[id], data_id = id),
colour = "black", alpha = 0.6) +
scale_fill_viridis() +
geom_text(data = data,
aes(x = x, y = y, label = StoreKey),
size = 2, colour = "black") +
theme_void() +
theme(legend.position = "none") +
coord_equal()
# Interactive
widg <- ggiraph::ggiraph(ggobj = p, width_svg = 7, height_svg = 7)
widg
})
output$CategoryGrowth <- renderPlot({
ggplot(transactions.sag(), aes(x = TransactionDate, y = cum_rev,
fill = ProductCategory_Lvl2)) +
labs(fill = "Product Category\nLvl. 2",
x = "Transaction Date",y = "Cumulative revenues" ) +
geom_area(color = "black", linewidth = 0.2, alpha = 0.6) +
theme(# panel.grid.major = element_blank(),
# axis.line = element_line(colour = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_rect(fill=NA),
plot.background = element_rect(fill=NA))
})
output$ParetoAnalysis <- renderPlot({
print(ggplot(data = topN.products(), aes(x = factor(ProductKey, levels = ProductKey), y = per.revenues)) +
geom_bar(stat = "identity", aes(fill = topN.products()$tot.revenues, alpha = 0.6)) +
geom_hline(yintercept = 0.75, colour = "blue") +
geom_hline(yintercept = 0.90, colour = "red") +
geom_point() +
geom_path() +
scale_x_discrete(breaks = topN.products()$ProductKey) +
ylab("Cumulated revenues") +
xlab("ProductKey") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
panel.background = element_rect(fill=NA),
plot.background = element_rect(fill=NA),
legend.position =  'none',
axis.title.x = element_blank(),
axis.title.y = element_blank()))
})
}
shinyApp(ui, server)
str(Sales)
pacman::p_load(readxl,lubridate,dplyr,timechange,stringr,shinydashboard,
shiny, ggplot2, shinythemes, ggrepel, tidyverse, shinyWidgets,
ggcharts, packcircles, viridis, ggiraph, lattice, gcookbook,
tidyr, timechange)
options(scipen=999)
pacman::p_load(readxl,lubridate,dplyr,timechange,stringr,shinydashboard,
shiny, ggplot2, shinythemes, ggrepel, tidyverse, shinyWidgets,
ggcharts, packcircles, viridis, ggiraph, lattice, gcookbook,
tidyr, timechange, ggstream, plyr)
subset(Sales, select = -c("Festivity "))
subset(Sales, select = -c("Festivity"))
subset(Sales, select = -c(Festivity))
colnames(Sales)
Sales <- subset(Sales, select = -c(Festivity))
ui <- fluidPage(
theme = shinytheme("flatly"),
navbarPage(
title = "OW - Hackatow",
tabPanel("Exploratory Analysis",
sidebarPanel(
tags$h3("Slicers"), # "h3" is the heading's size
sliderInput(inputId = "Time", # Creating the slider on the side
label = "Date",
min = as.POSIXct("2020-01-01", format = "%Y-%m-%d", tz = ""),
max = as.POSIXct("2022-12-31", format = "%Y-%m-%d", tz = ""),
value = c(min(Sales$TransactionDate),
max(Sales$TransactionDate)),
timeFormat="%Y-%m-%d",
timezone = "+0100"),
pickerInput(inputId = "ProductID",
label = "ProductKey",
choices = levels(Sales$ProductKey),
options = list('actions-box' = TRUE,
'liveSearch' = TRUE,
'showTick' = TRUE),
multiple = TRUE,
selected = c("49340", "49341", "49333","49329")),
checkboxGroupInput(inputId = "Channel",
label = "Channel",
choices = c("Online", "Physical"),
selected = c("Online", "Physical")),
pickerInput(inputId = "StoreID",
label = "StoreKey",
choices = levels(Sales$StoreKey),
options = list('actions-box' = TRUE,
'liveSearch' = TRUE,
'showTick' = TRUE),
multiple = TRUE,
selected = "2071"
),
checkboxGroupInput(inputId = "Category",
label = "Category",
choices = levels(Sales$ProductCategory_Lvl2),
selected = "AC",
inline = TRUE),
pickerInput(inputId = "Promo",
label = "PromoMechanic",
choices = levels(Sales$PromoMechanic),
options = list('actions-box' = TRUE,
'liveSearch' = TRUE,
'showTick' = TRUE),
multiple = TRUE,
selected = "Percentage off"),
numericInput(inputId = "TopN",
label = "Top-N-Pareto",
value = 5,
max = 20,
min = 3),
downloadButton(outputId = "report",
label = "Generate report")
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel(#splitLayout(cellWidths = c("60%", "20%", "20%")),
tags$p("Aggregate Sales Volumes"),
plotOutput(outputId = "SalesVolumes"),
# tags$p("Summary Statistics"),
#valueBoxOutput(outputId = "MeanDiscount"),
#valueBoxOutput(outputId = "MeanSale"),
valueBoxOutput(outputId = "TotalSales1"),
valueBoxOutput(outputId = "TotalDiscount1"),
valueBoxOutput(outputId = "Volumes1")
),
tabPanel(tags$p("Volumes by PromoMechanic"),
plotOutput(outputId = "PromotionMechanism"),
valueBoxOutput(outputId = "TotalSales2"),
valueBoxOutput(outputId = "TotalDiscount2"),
valueBoxOutput(outputId = "Volumes2")
),
tabPanel(tags$p("Volumes by Stores"),
ggiraphOutput(outputId = "Store"),
valueBoxOutput(outputId = "TotalSales3"),
valueBoxOutput(outputId = "TotalDiscount3"),
valueBoxOutput(outputId = "Volumes3")
),
tabPanel(tags$p("Products' Growth"),
plotOutput(outputId = "CategoryGrowth"),
valueBoxOutput(outputId = "TotalSales4"),
valueBoxOutput(outputId = "TotalDiscount4"),
valueBoxOutput(outputId = "Volumes4")
),
tabPanel(tags$p("Category In-depth"),
plotOutput(outputId = "ParetoAnalysis"),
valueBoxOutput(outputId = "TotalSales5"),
valueBoxOutput(outputId = "TotalDiscount5"),
valueBoxOutput(outputId = "Volumes5")
)
)
)
)
)
)
server <- function(input, output){
datasetInput <- reactive({
Sales %>%
filter(TransactionDate >= input$Time[1] & TransactionDate <= input$Time[2]) %>%
filter(DistributionChannel %in% input$Channel) %>%
filter(StoreKey %in% input$StoreID) %>%
filter(ProductCategory_Lvl2 %in% input$Category) %>%
filter(ProductKey %in% input$ProductID) %>%
group_by(TransactionDate) %>%
summarise(Daily_Mean = mean(ActualSales),
Daily_Sum = sum(ActualSales),
Daily_Discount = -sum(SalesDiscount),
Volumes = sum(UnitVolume))
})
datasetInput2 <- reactive({
Sales %>%
filter(TransactionDate >= input$Time[1] & TransactionDate <= input$Time[2]) %>%
filter(DistributionChannel %in% input$Channel) %>%
filter(StoreKey %in% input$StoreID) %>%
filter(ProductCategory_Lvl2 %in% input$Category) %>%
filter(ProductKey %in% input$ProductID) %>%
group_by(TransactionDate, PromoMechanic, DistributionChannel) %>%
summarise(Daily_Mean = mean(ActualSales),
Daily_Sum = sum(ActualSales),
Daily_Discount = -sum(SalesDiscount),
Volumes = sum(UnitVolume))
})
store.summary <- reactive({
Sales %>%
select(StoreKey, StoreType, Region_Lvl1, Region_Lvl2, ActualSales, TransactionDate,
DistributionChannel, ProductCategory_Lvl2, ProductKey) %>%
filter(TransactionDate >= input$Time[1] & TransactionDate <= input$Time[2]) %>%
filter(DistributionChannel %in% input$Channel) %>%
filter(ProductCategory_Lvl2 %in% input$Category) %>%
filter(ProductKey %in% input$ProductID) %>%
group_by(StoreKey, StoreType, Region_Lvl1, Region_Lvl2) %>%
summarise(revenues = sum(ActualSales)) %>%
mutate(txt = paste("Store: ",StoreKey, "\n",
"Yearly sales: ", round(revenues/1000, digits = 0),"kMYR", "\n",
"Region lvl.1: ", Region_Lvl1, "\n",
"Region lvl.2: ", Region_Lvl2)) %>%
arrange(desc(revenues)) %>%
ungroup()
})
transactions.sag <- reactive({
Sales %>%
filter(TransactionDate >= input$Time[1] & TransactionDate <= input$Time[2]) %>%
filter(DistributionChannel %in% input$Channel) %>%
filter(StoreKey %in% input$StoreID) %>%
filter(ProductCategory_Lvl2 %in% input$Category) %>%
group_by(ProductCategory_Lvl2) %>%
arrange(TransactionDate) %>%
mutate(cum_rev = cumsum(ActualSales))
})
pareto.analysis <- reactive({
Sales %>%
select(ProductKey, ProductCategory_Lvl2, ActualSales, TransactionDate, DistributionChannel, StoreKey) %>%
filter(TransactionDate >= input$Time[1] & TransactionDate <= input$Time[2]) %>%
filter(DistributionChannel %in% input$Channel) %>%
filter(StoreKey %in% input$StoreID) %>%
filter(ProductCategory_Lvl2 %in% input$Category) %>%
group_by(ProductKey, ProductCategory_Lvl2) %>%
summarise(tot.revenues = sum(ActualSales)) %>%
na.omit() %>%
ungroup() %>%
arrange(desc(tot.revenues)) %>%
mutate(per.revenues = base::cumsum(tot.revenues)/sum(tot.revenues))
})
topN.products <- reactive({
pareto.analysis() %>%
filter(ProductKey %in% pareto.analysis()$ProductKey[1:input$TopN])
})
# BarPlot
output$PromotionMechanism <- renderPlot({
print(myplot2 <- ggplot(datasetInput2(), aes(x=DistributionChannel,
y=Daily_Sum, fill=PromoMechanic)) +
geom_bar(stat="identity", position=position_dodge()) +
# geom_errorbar(aes(ymin=Daily_Sum, ymax=Daily_Sum), width=.2,
#              position=position_dodge(.9)) +
scale_fill_brewer(palette="Paired") +
scale_x_discrete(guide = guide_axis(check.overlap = TRUE)) +
theme(panel.grid.major = element_blank(),
# axis.line = element_line(colour = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_rect(fill= NA),
plot.background = element_rect(fill= NA)))
})
# Time Series
output$SalesVolumes <- renderPlot({
print(myplot <- ggplot(datasetInput(), aes(x = TransactionDate, y = Daily_Sum)) +
geom_line(color = "deepskyblue4") +
geom_line(aes(x = TransactionDate,
y = Daily_Discount*(max(Daily_Sum)/max(Daily_Discount))),
color = "yellow4") +
scale_y_continuous(
# Features of the first axis
name = "AggregateSales",
# Add a second axis and specify its features
sec.axis = sec_axis(~.*max(datasetInput()$Daily_Sum)/max(datasetInput()$Daily_Discount),
name="AggregateDiscount")) +
theme(# panel.grid.major = element_blank(),
# axis.line = element_line(colour = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_rect(fill=NA),
plot.background = element_rect(fill=NA)))
})
#output$MeanDiscount <- renderValueBox({
# valueBox(subtitle = mean(datasetInput()$Daily_Discount),
#         value = "MeanDailyDiscount (MYR)")
# })
#output$MeanSale <- renderValueBox({
# valueBox(subtitle = mean(datasetInput()$Daily_Sum),
#         value = "MeanDailySales (MYR)")
#})
lapply(1:5, function(nr){
output[[paste0("Volumes", nr)]] <- renderValueBox({
valueBox(
subtitle = sum(datasetInput()$Volumes),
value = "Volumes (Unit)",
width = 4,
color = "navy")
})
})
lapply(1:5, function(nr){
output[[paste0("TotalDiscount", nr)]] <- renderValueBox({
valueBox(
subtitle = sum(datasetInput()$Daily_Discount),
value = "TotDiscount (MYR)",
width = 4,
color = "navy")})
})
lapply(1:5, function(nr){
output[[paste0("TotalSales", nr)]] <- renderValueBox({
valueBox(
subtitle = sum(datasetInput()$Daily_Sum),
value = "TotSales (MYR)",
width = 4,
color = "navy")})
})
output$Store <- ggiraph::renderggiraph({
packing <- circleProgressiveLayout(store.summary()$revenues, sizetype = "area")
data <- cbind(store.summary(), packing)
data.gg <- circleLayoutVertices(packing, npoints = 50)
p <- ggplot() +
geom_polygon_interactive(data = data.gg,
aes(x = x, y = y, group = id, fill = id,
tooltip = data$txt[id], data_id = id),
colour = "black", alpha = 0.6) +
scale_fill_viridis() +
geom_text(data = data,
aes(x = x, y = y, label = StoreKey),
size = 2, colour = "black") +
theme_void() +
theme(legend.position = "none") +
coord_equal()
# Interactive
widg <- ggiraph::ggiraph(ggobj = p, width_svg = 7, height_svg = 7)
widg
})
output$CategoryGrowth <- renderPlot({
ggplot(transactions.sag(), aes(x = TransactionDate, y = cum_rev,
fill = ProductCategory_Lvl2)) +
labs(fill = "Product Category\nLvl. 2",
x = "Transaction Date",y = "Cumulative revenues" ) +
geom_area(color = "black", linewidth = 0.2, alpha = 0.6) +
theme(# panel.grid.major = element_blank(),
# axis.line = element_line(colour = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_rect(fill=NA),
plot.background = element_rect(fill=NA))
})
output$ParetoAnalysis <- renderPlot({
print(ggplot(data = topN.products(), aes(x = factor(ProductKey, levels = ProductKey), y = per.revenues)) +
geom_bar(stat = "identity", aes(fill = topN.products()$tot.revenues, alpha = 0.6)) +
geom_hline(yintercept = 0.75, colour = "blue") +
geom_hline(yintercept = 0.90, colour = "red") +
geom_point() +
geom_path() +
scale_x_discrete(breaks = topN.products()$ProductKey) +
ylab("Cumulated revenues") +
xlab("ProductKey") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
panel.background = element_rect(fill=NA),
plot.background = element_rect(fill=NA),
legend.position =  'none',
axis.title.x = element_blank(),
axis.title.y = element_blank()))
})
}
shinyApp(ui, server)
path = "../Data-OW/"
